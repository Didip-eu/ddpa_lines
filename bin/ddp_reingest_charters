#!/usr/bin/env python3


"""Migrates a collection of downloaded charters to a new root

The script uses the stored html.
The program will write the shell commands to a file.
They can be executed by pipying to to bash after inspection.
Using this script with git might be problematic.
"""


import csv
from io import StringIO
from urllib.request import urlopen
from bs4 import BeautifulSoup
from pathlib import Path
from tqdm import tqdm
import fargv
import sys
import pickle
import os


from ddp_util import get_charter_path_elements, get_names_from_charter_html


p = {
    "html_files":[set({}), "something like */*/*/original.html"],
    "new_root":"./reingested/",
    "create_dir_cmd_str": "mkdir -p",
    "move_cmd_str": "mv ",
    "store_cmds":"/tmp/reingest.sh"
}


if __name__ == "__main__":
    args, _ = fargv.fargv(p)
    os.system(f"mkdir -p {args.new_root}")
    fout = open(args.store_cmds,"w")
    for file in tqdm.tqdm(args.html_files):
        file = Path(file)
        archive_name, fond_name, charter_atomid = get_names_from_charter_html(open(file,"r").read())
        archive_id, fond_id, charter_id = get_charter_path_elements(archive_name, fond_name, charter_atomid)
        old_path = file.parents[0]
        new_path = f"{args.new_root}/{archive_id}/{fond_id}/{charter_id}"
        create_dirs = f"{args.create_dir_cmd_str}  {args.new_root}/{archive_id}/{fond_id}"
        mv_cmd = f"{args.move_cmd_str} {old_path} {new_path}"
        fout.write(f"{create_dirs};{mv_cmd}\n")
        fout.flush()
    