#!/usr/bin/env python3


import ddp_util
import fargv
import pickle
from pathlib import Path
import tqdm

def leech_charter_names(archive_root_url, url_store_stream, output_root, url2path_idx, url2path_idx_path):
    for archive_url in tqdm.tqdm(ddp_util.get_archive_urls(archive_root_url), desc=f"Leeching {archive_root_url}"):
        for fond_url in tqdm.tqdm(ddp_util.get_fonds_from_archive(archive_url),  desc=f"Leeching {archive_url}"):
            for charter_url in tqdm.tqdm(ddp_util.get_charters_from_fond(fond_url), leave=False, desc=f"Leeching {fond_url}"):
                url_store_stream.write(f"f{charter_url}\n")
                url_store_stream.flush()
                ddp_util.leech_charter(charter_url, output_root, url2path_idx=url2path_idx, url2path_idx_path=url2path_idx_path, verbose=0)


if __name__ == "__main__":
    p = {
        "root": "./tmp/data/leech_all",
        "url_storage": "{root}/charter_urls.txt",
        "url2path_idx_path": "{root}/url2path_idx.pickle",
    }
    args, _ = fargv.fargv(p)
    Path(args.root).mkdir(parents=True, exist_ok=True)
    url_stream = open(args.url_storage, "w")
    if Path(args.url2path_idx_path).is_file():
        url2path_idx = pickle.load(open(args.url2path_idx_path, "rb"))
    else:
        url2path_idx = {}
    leech_charter_names("https://www.monasterium.net/mom/fonds", url_stream, output_root=args.root, url2path_idx=url2path_idx, url2path_idx_path=args.url2path_idx_path)
