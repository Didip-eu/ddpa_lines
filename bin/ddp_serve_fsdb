#!/usr/bin/env python3

import os
from typing import Any
from flask import Flask, jsonify, render_template, send_file
import fargv
from pathlib import Path
import time
import sys

p = {
    "root":"./misc/1000_CVCharters/",
    "templates":"/home/anguelos/work/src/didipcv/misc/flask/templates",
    "port":5000,
    "debug":True
}

args, _ = fargv.fargv(p, argv=[v for v in sys.argv])  # RESPAWNING the job break fargv otherwise


def parse_all(db_root, archive_idx, fond_idx, charter_idx, img_idx):
    img_paths = [str(p) for p in Path(db_root).glob(f'*/*/*/*.img.*')]

    img_idx = {p.split("/")[-1].split(".")[0]:p for p in img_paths}
    charter_paths = [str(p) for p in Path(db_root).glob(f'*/*/*')]
    charter_idx = {p.split("/")[-1]:p for p in charter_paths}
    fond_paths = [str(p) for p in Path(db_root).glob(f'*/*')]
    fond_idx = {p.split("/")[-1]:p for p in fond_paths}
    archive_paths = [str(p) for p in Path(db_root).glob(f'*') if p.is_dir()]
    archive_idx = {p.split("/")[-1]:p for p in archive_paths}
    all_idx = {}
    all_idx.update(img_idx)
    all_idx.update(charter_idx)
    all_idx.update(fond_idx)
    all_idx.update(archive_idx)
    return img_idx, charter_idx, fond_idx, archive_idx, all_idx


def parse_urls(charter_idx):
    momurl2charteridx ={}
    for charter_id, charter_path in charter_idx.items():
        momurl2charteridx[open(f"{charter_path}/url.txt","r").read()] = charter_id
    return momurl2charteridx



class Charter:
    def __init__(self, path) -> None:
        self.path = path
        self.md5 = path.split("/")[-1]
        self.atom_id = open(f"{path}/atom_id.txt").read().strip()
        self.imgs = [str(p).split("/")[-1].split(".")[0] for p in Path(path).glob(f'*.img.*')]
        self.fond = path.split("/")[-2]
        self.archive = path.split("/")[-3]
    
    def __hash__(self) -> int:
        return hash(self.md5)


class Fond:
    def __init__(self, path) -> None:
        self.path = path
        self.md5 = path.split("/")[-1]
        self.archive = path.split("/")[-3]
        self.charters = [str(p).split("/")[-1] for p in Path(path).glob(f'*')]
        print("Charters:",self.charters)
    
    def __hash__(self) -> int:
        return hash(self.md5)
    

class Archive:
    def __init__(self, path) -> None:
        self.path = path
        self.md5 = path.split("/")[-1]
        self.fonds = [str(p).split("/")[-1] for p in Path(path).glob(f'*')]

    def __hash__(self) -> int:
        pass


class FSDB:
    def __init__(self, path) -> None:
        self.path = path
        self.archives = [str(p).split("/")[-1] for p in Path(path).glob(f'*') if p.is_dir()]

    def __hash__(self) -> int:
        pass


app = Flask(__name__,  template_folder=p["templates"])
app.root_path = os. getcwd()


@app.route('/image/<md5>')
def serve_image(md5):
    file_ext = img_idx[md5].split(".")[-1]
    if file_ext == "jpg" or file_ext == "jpeg":
        return send_file(img_idx[md5], mimetype='image/jpeg')
    elif file_ext == "png":
        return send_file(img_idx[md5], mimetype='image/png')
    raise Exception(f"Unknown file extension {file_ext}")


@app.route('/info')
def render_info():
    return render_template(f'info.html', charter_count=len(charter_idx), 
                           image_count=len(img_idx), archive_count=len(archive_idx), 
                           fond_count=len(fond_idx), load_time=load_time, uptime=time.time()-start_time)


@app.route('/mom/<old_path>')
def render_charter_momurl(old_path):
    print("OLD_PATH", old_path)
    old_url = f"https://www.monasterium.net/{old_path}"
    charter = Charter[charter_idx[momurl2charteridx[old_url]]]
    return render_template(f'charter.html', obj=charter)


@app.route('/')
def serve_fsdb():
    fsdb = FSDB(args.root)
    return render_template(f'fsdb.html', obj=fsdb)


@app.route('/get_cei/<md5>')
def serve_cei(md5):
    charter_path = charter_idx[md5]
    return send_file(f"{charter_path}/cei.xml", mimetype='text/xml')

@app.route('/charter/<md5>')
def render_charter(md5):
    charter = Charter(charter_idx[md5])
    return render_template(f'charter.html', obj=charter)

@app.route('/fond/<md5>')
def render_fond(md5):
    fond = Fond(fond_idx[md5])
    return render_template(f'fond.html', obj=fond)

@app.route('/archive/<md5>')
def render_archive(md5):
    archive = Archive(archive_idx[md5])
    return render_template(f'archive.html', obj=archive)

if __name__ == '__main__':    
    start_time = time.time()
    img_idx, charter_idx, fond_idx, archive_idx, all_idx = parse_all(args.root, None, None, None, None)
    momurl2charteridx = parse_urls(charter_idx=charter_idx)
    load_time = time.time() - start_time
    print([f"http://127.0.0.1:5000/charter/{md5}" for md5 in list(charter_idx.keys())[:10]])
    #print(momurl2charteridx)
    app.run(debug=args.debug, port=args.port)
